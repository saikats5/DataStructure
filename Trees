A data structure that consists of nodes in a parent/child relationship

Lists - linear
Trees - nonlinear

-Always parent child relationship, not child to parent and sibling to sibling relation, one root

-Root - the top node in a tree 
-Child - a node directly connected to another node when moving away from the root
-Parent - the converse notion of a child
-Siblings - a group of nodes with the same parent
-Leaf - a node with no children
-Edge - the connection between one node and another

HTML DOM, Network Routing, Folders in OS - example

Trees can have any number of children
Binary Tree can have 0,1,2 children not 3 or more
Binary Search Tree has less number nodes on the left and greater number nodes on the right

class Node {
    constructor(value){
        this.value = value;
        this.left = null;
        this.right = null;
    }
}
class BinarySearchTree {
    constructor(){
        this.root = null;
    }
    insert(value){
        var newNode = new Node(value);
        if(this.root === null){
            this.root = newNode;
            return this;
        }
        var current = this.root;
        while(true){
            if(value === current.value) return undefined;
            if(value < current.value){
                if(current.left === null){
                    current.left = newNode;
                    return this;
                }
                current = current.left;
            } else {
                if(current.right === null){
                    current.right = newNode;
                    return this;
                } 
                current = current.right;
            }
        }
    }
    find(value){
        if(this.root === null) return false;
        var current = this.root,
            found = false;
        while(current && !found){
            if(value < current.value){
                current = current.left;
            } else if(value > current.value){
                current = current.right;
            } else {
                found = true;
            }
        }
        if(!found) return undefined;
        return current;
    }
    contains(value){
        if(this.root === null) return false;
        var current = this.root,
            found = false;
        while(current && !found){
            if(value < current.value){
                current = current.left;
            } else if(value > current.value){
                current = current.right;
            } else {
                return true;
            }
        }
        return false;
    }
}

/*
var tree = new BinarySearchTree();
tree.root = new Node(10);
tree.root.right = new Node(15);
tree.root.left = new Node(7);
tree.root.left.right = new Node(9)
*/

//      10
//   5     13
// 2  7  11  16