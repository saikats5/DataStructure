username.indexOf('testname') // searching algorithm

//linear search solution
- searching the item one after the other irrespective of any condition
//linear search methods
- indexOf
- includes
- find
- findIndex

it can be started from beginning or from the end, all that matters is that we're moving at a set interval one item at a time checking every single thing

//O(n)
function linearSearch(arr, val){
    for(var i = 0; i < arr.length; i++){
        if(arr[i] === val){
            return i;
        }
    }
    return -1;
}
linearSearch([2, 5, 6, 9, 13, 15, 28], 15)

//binary search
- improvement of linear search
- eliminating half of the remaining elements at a time
- binary search only workson sorted arrays

function binarySearch(arr, elem){
    var start = 0;
    var end = arr.length - 1;
    var middle = Math.floor((start + end) / 2);
    while(arr[middle] !== elem && start <= end){
        if(elem < arr[middle]){
            end = middle - 1;
        } else {
            start = middle + 1;
        }
        middle = Math.floor((start + end) / 2);
    }
    if(arr[middle] === elem){
        return middle;
    }
    return -1;
}
binarySearch([2, 5, 6, 9, 13, 15, 28], 15)

//O(log n) -> worst and average case
//O(1) -> best case

worst case -> 16 elements - 4 steps, 32 elements - 5 steps --> log2 n (i.e., 16, 32)

//naive string search
search shorter string from a longer string
function naiveSearch(long, short){
    var count = 0;
    for(var i = 0; i < long.length; i++){
        for(var j = 0; j < short.length; j++){
            if(short[j] !== long[i + j]){
                break;
            }
            if(j === short.length - 1){
                count++;
            }
        }
    }
    return count;
}
naiveSearch('lorie loled', 'lol')