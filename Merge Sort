Combination of splitting up, sorting and merging

exploits the fact that arrays of 0 or 1 element are always sorted

//Sorted merge sort
function merge(arr1, arr2){
    let results = [];
    let i = 0;
    let j = 0;
    while(i < arr1.length && j < arr2.length){
        if(arr2[j] > arr1[i]){
            results.push(arr[i]);
            i++;
        }else{
            results.push(arr2[j]);
            j++;
        }
    }
    while(i < arr1.length){
        results.push(arr[i]);
        i++;
    }
    while(j < arr2.length){
        results.push(arr2[j]);
        j++;
    }
    return results;
}
merge([1, 10, 50], [2, 14, 99, 100])


function mergeSort(arr){
    if(arr.length <= 1) return arr;
    let mid = Math.floor(arr.length/2);
    let left =  mergeSort(arr.slice(0, mid));
    let right = mergeSort(arr.slice(mid));
    return merge(left, right)
}
mergeSort([10, 24, 76, 73])

//Big O -> O(n logn)

32
16 16
8 8 8 8
4 4 4 4 4 4 4 4
......................

that is log base 2 of n --> O(log n) --> 2^4 --> 4 step up
O(log n) decompositions O(n) comparisions per decomposition(merging)